name: Checker ID Processing

on:
  schedule:
    - cron: '1-57/2 18-23 * * 1,2,3,4,6'
  workflow_dispatch:

jobs:
  check-ids:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    outputs:
      has_ids: ${{ steps.check-ids.outputs.has_ids }}
    steps:
      - uses: actions/checkout@v4
      - name: Restore cached file SHAs
        id: cache-shas
        uses: actions/cache@v3
        with:
          path: shas.json
          key: file-shas-${{ github.run_id }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
      - name: Check for available checker IDs
        id: check-ids
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -c "
          import requests, base64, json, os
          token = os.getenv('GITHUB_TOKEN')
          headers = {'Authorization': f'Bearer {token}', 'Accept': 'application/vnd.github.v3+json'}
          repo = 'lisan0007/lisanAtQA'
          shas = json.load(open('shas.json')) if os.path.exists('shas.json') else {}
          checker_ids, progress = set(), {'completed_checkers': []}
          for file in ['ApprovedCheckerIDs.txt', 'approval_progress.json']:
            headers_copy = headers.copy()
            if file in shas:
              headers_copy['If-None-Match'] = shas[file]
            response = requests.get(f'https://api.github.com/repos/{repo}/contents/{file}', headers=headers_copy)
            if response.status_code == 304:
              continue
            if response.status_code == 403 and 'X-RateLimit-Remaining' in response.headers and int(response.headers['X-RateLimit-Remaining']) < 10:
              print('Rate limit nearly exhausted.')
              exit(1)
            if response.status_code == 404:
              print(f'::set-output name=has_ids::false')
              exit(0)
            response.raise_for_status()
            content = response.json()
            shas[file] = content['sha']
            decoded = base64.b64decode(content['content']).decode('utf-8')
            if file == 'ApprovedCheckerIDs.txt':
              checker_ids = {line.strip() for line in decoded.splitlines() if line.strip()}
            else:
              progress = json.loads(decoded) if decoded else {'completed_checkers': []}
          json.dump(shas, open('shas.json', 'w'))
          has_ids = bool([id for id in checker_ids if id not in progress['completed_checkers']])
          print(f'::set-output name=has_ids::{has_ids}')
          "
      - name: Save cached file SHAs
        if: always()
        uses: actions/cache@v3
        with:
          path: shas.json
          key: file-shas-${{ github.run_id }}
      - name: Log ID availability
        run: echo "Checker IDs available: ${{ steps.check-ids.outputs.has_ids }}"

  process-checker-ids:
    needs: check-ids
    if: needs.check-ids.outputs.has_ids == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 2
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        attempt: [1, 2]
    steps:
      - uses: actions/checkout@v4
      - name: Download cookie artifact
        uses: actions/download-artifact@v4
        with:
          name: session-cookies
          path: .
        continue-on-error: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install httpx requests
      - name: Run checker script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Attempt ${{ matrix.attempt }} of 2"
          python checker.py
      - name: Upload cookie artifact
        uses: actions/upload-artifact@v4
        with:
          name: session-cookies
          path: session_cookies.pkl
          if-no-files-found: ignore
          retention-days: 1
      - name: Log failure if both attempts fail
        if: failure()
        run: |
          echo "Checker script failed after ${{ matrix.attempt }} attempts. Check logs for details."
          exit 1
